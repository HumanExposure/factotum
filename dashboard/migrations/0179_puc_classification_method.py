# Generated by Django 2.2.17 on 2020-12-10 07:00
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def populate_methods(apps, schema_editor):
    ProductToPucClassificationMethod = apps.get_model(
        "dashboard", "ProductToPucClassificationMethod"
    )
    method_choices = {
        "MA": ["Manual", 1],
        "RU": ["Rule Based", 2],
        "MB": ["Manual Batch", 3],
        "BA": ["Bulk Assignment", 4],
        "AU": ["Automatic", 5],
    }
    for methodcode, methoddetails in method_choices.items():
        ProductToPucClassificationMethod.objects.create(
            code=methodcode, name=methoddetails[0], rank=methoddetails[1]
        )


def empty_reverse_function(apps, schema_editor):
    # The reverse function is not required
    pass


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("dashboard", "0178_add_rawchem_index"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProductToPucClassificationMethod",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "code",
                    models.CharField(
                        db_column="id",
                        max_length=3,
                        primary_key=True,
                        serialize=False,
                        verbose_name="classification method code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        verbose_name="classification method name",
                    ),
                ),
                (
                    "rank",
                    models.PositiveSmallIntegerField(
                        unique=True, verbose_name="classification method rank"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "PUC classification method",
                "verbose_name_plural": "PUC classification methods",
                "ordering": ["rank"],
            },
        ),
        migrations.RunPython(populate_methods, empty_reverse_function),
        migrations.RunSQL(
            sql=migrations.RunSQL.noop,
            # this is separated out before the alter classification_method field operation so the rollback
            # is executed after the field rollback
            reverse_sql="""
              create or replace view product_uber_puc as
              select id, product_id, puc_id
              from dashboard_producttopuc
              where (product_id, classification_method) in (
                select product_id,
                  case
                    when min(uber_order) = 1 then 'MA'
                    when min(uber_order) = 2 then 'RU'
                    when min(uber_order) = 3 then 'MB'
                    when min(uber_order) = 4 then 'BA'
                    when min(uber_order) = 5 then 'AU'
                    else 'MA'
                  end as classification_method
                from
                  (select product_id,
                    case
                      when classification_method = 'MA' then 1
                      when classification_method = 'RU' then 2
                      when classification_method = 'MB' then 3
                      when classification_method = 'BA' then 4
                      when classification_method = 'AU' then 5
                      else 1
                    end as uber_order  
                  from dashboard_producttopuc) temp
                  group by product_id
                  having min(uber_order)
                )
            """,
        ),
        migrations.AlterField(
            model_name="producttopuc",
            name="classification_method",
            field=models.ForeignKey(
                default="MA",
                max_length=3,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.ProductToPucClassificationMethod",
            ),
        ),
        migrations.RunSQL(
            sql="""
            create or replace view product_uber_puc as
            SELECT ptp.*
            FROM (
                SELECT ptp.id, product_id, puc_id, classification_method_id, rank
                FROM dashboard_producttopuc ptp
                LEFT JOIN dashboard_producttopucclassificationmethod cm ON cm.id = ptp.classification_method_id
            ) ptp
            LEFT JOIN (
                SELECT product_id, puc_id, classification_method_id, rank
                FROM dashboard_producttopuc ptp
                LEFT JOIN dashboard_producttopucclassificationmethod cm ON cm.id = ptp.classification_method_id 
            ) ptp_rank ON ptp.product_id = ptp_rank.product_id AND ptp.rank > ptp_rank.rank
            WHERE ptp_rank.rank IS NULL
            """,
            # reserve sql is separated out before the alter classification_method field operation so the rollback
            # is executed after the field rollback
            reverse_sql=migrations.RunSQL.noop,
        ),
    ]
