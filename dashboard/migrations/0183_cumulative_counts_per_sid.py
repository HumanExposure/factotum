# Generated by Django 2.2.17 on 2020-12-30 14:13

from django.db import migrations
import django_db_views.migration_functions
import django_db_views.operations


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0182_puc_sid_count_view'),
    ]

    operations = [
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration('SELECT \n            1 as id,\n            product_uber_puc.puc_id AS puc_id,\n            dashboard_dsstoxlookup.id as dsstoxlookup_id ,\n            count(product_uber_puc.product_id) AS product_count\n        FROM\n            product_uber_puc\n            INNER JOIN\n            dashboard_productdocument ON (product_uber_puc.product_id = dashboard_productdocument.product_id)\n                INNER JOIN\n            dashboard_datadocument ON (dashboard_productdocument.document_id = dashboard_datadocument.id)\n                INNER JOIN\n            dashboard_rawchem ON (dashboard_datadocument.id = dashboard_rawchem.extracted_text_id)\n                INNER JOIN\n            dashboard_dsstoxlookup ON (dashboard_rawchem.dsstox_id = dashboard_dsstoxlookup.id)\n            GROUP BY product_uber_puc.puc_id, dashboard_dsstoxlookup.id\n            ', 'products_per_puc_and_sid'),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration('SELECT \n            product_uber_puc.puc_id AS puc_id,\n            dashboard_dsstoxlookup.sid as dsstoxlookup_id ,\n            count(product_uber_puc.product_id) AS product_count\n        FROM\n            product_uber_puc\n            INNER JOIN\n            dashboard_productdocument ON (product_uber_puc.product_id = dashboard_productdocument.product_id)\n                INNER JOIN\n            dashboard_datadocument ON (dashboard_productdocument.document_id = dashboard_datadocument.id)\n                INNER JOIN\n            dashboard_rawchem ON (dashboard_datadocument.id = dashboard_rawchem.extracted_text_id)\n                INNER JOIN\n            dashboard_dsstoxlookup ON (dashboard_rawchem.dsstox_id = dashboard_dsstoxlookup.id)\n            GROUP BY product_uber_puc.puc_id, sid', 'products_per_puc_and_sid'),
            atomic=False,
        ),
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration("SELECT \n        products_per_puc_and_sid.id,\n        products_per_puc_and_sid.dsstoxlookup_id,\n        products_per_puc_and_sid.puc_id AS puc_id,\n        products_per_puc_and_sid.product_count AS product_count,\n        prod_fams.prod_fam_count AS prod_fam_count,\n        gen_cats.gen_cat_count AS gen_cat_count,\n        (CASE\n            WHEN\n                ((ISNULL(dashboard_puc.prod_type)\n                    OR (dashboard_puc.prod_type = ''))\n                    AND (dashboard_puc.prod_fam IS NOT NULL)\n                    AND (dashboard_puc.prod_fam <> ''))\n            THEN\n                prod_fams.prod_fam_count\n            WHEN\n                (ISNULL(dashboard_puc.prod_fam)\n                    OR (dashboard_puc.prod_fam = ''))\n            THEN\n                gen_cats.gen_cat_count\n            ELSE products_per_puc_and_sid.product_count\n        END) AS cumulative_product_count,\n        (CASE\n            WHEN\n                ((ISNULL(dashboard_puc.prod_type)\n                    OR (dashboard_puc.prod_type = ''))\n                    AND (dashboard_puc.prod_fam IS NOT NULL)\n                    AND (dashboard_puc.prod_fam <> ''))\n            THEN\n                2\n            WHEN\n                (ISNULL(dashboard_puc.prod_fam)\n                    OR (dashboard_puc.prod_fam = ''))\n            THEN\n                1\n            ELSE 3\n        END) AS puc_level\n    FROM\n        ((products_per_puc_and_sid\n        LEFT JOIN\n            dashboard_puc on dashboard_puc.id = products_per_puc_and_sid.puc_id\n        LEFT JOIN (SELECT \n            kind_id ,\n             gen_cat ,\n                SUM(products_per_puc_and_sid.product_count) AS gen_cat_count\n        FROM\n            products_per_puc_and_sid\n            LEFT JOIN\n            dashboard_puc on dashboard_puc.id = products_per_puc_and_sid.puc_id\n        GROUP BY kind_id , gen_cat) gen_cats ON (((gen_cats.kind_id = dashboard_puc.kind_id)\n            AND (gen_cats.gen_cat = dashboard_puc.gen_cat))))\n        LEFT JOIN (SELECT \n            kind_id,\n            gen_cat,\n            prod_fam,\n                SUM(products_per_puc_and_sid.product_count) AS prod_fam_count\n        FROM\n            products_per_puc_and_sid\n            INNER JOIN\n            dashboard_puc on dashboard_puc.id = products_per_puc_and_sid.puc_id\n        WHERE\n            ((prod_fam IS NOT NULL)\n                AND (prod_fam <> ''))\n        GROUP BY dashboard_puc.kind_id , dashboard_puc.gen_cat , dashboard_puc.prod_fam) prod_fams ON (((prod_fams.kind_id = dashboard_puc.kind_id)\n            AND (prod_fams.gen_cat = dashboard_puc.gen_cat)\n            AND (prod_fams.prod_fam = dashboard_puc.prod_fam)\n            AND (dashboard_puc.prod_fam <> ''))))", 'cumulative_products_per_puc_and_sid'),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration('', 'cumulative_products_per_puc_and_sid'),
            atomic=False,
        ),
    ]
