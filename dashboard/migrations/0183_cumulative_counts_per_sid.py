# Generated by Django 2.2.17 on 2020-12-31 14:36

from django.db import migrations
import django_db_views.migration_functions
import django_db_views.operations


class Migration(migrations.Migration):

    dependencies = [("dashboard", "0182_puc_sid_count_view")]

    operations = [
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration(
                "SELECT \n            1 as id,\n            product_uber_puc.puc_id AS puc_id,\n            dashboard_dsstoxlookup.id as dsstoxlookup_id ,\n            count(product_uber_puc.product_id) AS product_count\n        FROM\n            product_uber_puc\n            INNER JOIN\n            dashboard_productdocument ON (product_uber_puc.product_id = dashboard_productdocument.product_id)\n                INNER JOIN\n            dashboard_datadocument ON (dashboard_productdocument.document_id = dashboard_datadocument.id)\n                INNER JOIN\n            dashboard_rawchem ON (dashboard_datadocument.id = dashboard_rawchem.extracted_text_id)\n                INNER JOIN\n            dashboard_dsstoxlookup ON (dashboard_rawchem.dsstox_id = dashboard_dsstoxlookup.id)\n            GROUP BY product_uber_puc.puc_id, dashboard_dsstoxlookup.id\n            ",
                "products_per_puc_and_sid",
            ),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration(
                "SELECT \n            product_uber_puc.puc_id AS puc_id,\n            dashboard_dsstoxlookup.sid as dsstoxlookup_id ,\n            count(product_uber_puc.product_id) AS product_count\n        FROM\n            product_uber_puc\n            INNER JOIN\n            dashboard_productdocument ON (product_uber_puc.product_id = dashboard_productdocument.product_id)\n                INNER JOIN\n            dashboard_datadocument ON (dashboard_productdocument.document_id = dashboard_datadocument.id)\n                INNER JOIN\n            dashboard_rawchem ON (dashboard_datadocument.id = dashboard_rawchem.extracted_text_id)\n                INNER JOIN\n            dashboard_dsstoxlookup ON (dashboard_rawchem.dsstox_id = dashboard_dsstoxlookup.id)\n            GROUP BY product_uber_puc.puc_id, sid",
                "products_per_puc_and_sid",
            ),
            atomic=False,
        ),
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration(
                'SELECT cumulative_union .* ,\n        COALESCE(products_per_puc_and_sid.product_count,0) as product_count\n        FROM\n        (SELECT  \n        -- gen cat\n        1 as id,\n        gencat_id.puc_id,\n        dsstoxlookup_id, \n        gencat_id.kind_id, \n        sum(products_per_puc_and_sid.product_count) as cumulative_product_count,\n        1 as puc_level\n        FROM \n        dashboard_puc \n        LEFT JOIN\n        products_per_puc_and_sid\n        ON products_per_puc_and_sid.puc_id = dashboard_puc.id\n        LEFT JOIN (select kind_id, gen_cat, min(id) as puc_id from dashboard_puc where prod_fam = "" and prod_type = "" GROUP BY kind_id, gen_cat) gencat_id\n        ON gencat_id.gen_cat = dashboard_puc.gen_cat AND gencat_id.kind_id = dashboard_puc.kind_id\n        GROUP BY dsstoxlookup_id, gencat_id.kind_id, gencat_id.gen_cat, gencat_id.puc_id\n        HAVING dsstoxlookup_id is not null\n        UNION \n        SELECT \n        -- prod fam\n        1 as id,\n        prodfam_id.puc_id,\n        dsstoxlookup_id, \n        prodfam_id.kind_id, \n        sum(products_per_puc_and_sid.product_count) as cumulative_product_count,\n        2 as puc_level\n        FROM \n        dashboard_puc \n        LEFT JOIN\n        products_per_puc_and_sid\n        ON products_per_puc_and_sid.puc_id = dashboard_puc.id\n        LEFT JOIN (select kind_id, gen_cat, prod_fam, min(id) as puc_id from dashboard_puc where prod_fam <> "" and prod_type = "" GROUP BY kind_id, gen_cat, prod_fam) prodfam_id\n        ON prodfam_id.gen_cat = dashboard_puc.gen_cat AND prodfam_id.kind_id = dashboard_puc.kind_id AND prodfam_id.prod_fam = dashboard_puc.prod_fam\n        WHERE dashboard_puc.prod_fam <> "" \n        GROUP BY  dsstoxlookup_id, prodfam_id.kind_id, prodfam_id.gen_cat, prodfam_id.puc_id, prodfam_id.prod_fam\n        -- exclude gen_cat\n        HAVING dsstoxlookup_id is not null\n        UNION \n        SELECT \n        -- prod_type\n        1 as id,\n        puc_id,\n        dsstoxlookup_id, \n        kind_id, \n        products_per_puc_and_sid.product_count as cumulative_product_count,\n        3 as puc_level\n        FROM \n        dashboard_puc \n        LEFT JOIN\n        products_per_puc_and_sid\n        ON products_per_puc_and_sid.puc_id = dashboard_puc.id\n        WHERE dashboard_puc.prod_type <> "" \n        AND dsstoxlookup_id is not null) cumulative_union\n        LEFT JOIN\n        products_per_puc_and_sid ON\n        products_per_puc_and_sid.puc_id = cumulative_union.puc_id\n        and products_per_puc_and_sid.dsstoxlookup_id = cumulative_union.dsstoxlookup_id',
                "cumulative_products_per_puc_and_sid",
            ),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration(
                "", "cumulative_products_per_puc_and_sid"
            ),
            atomic=False,
        ),
    ]
