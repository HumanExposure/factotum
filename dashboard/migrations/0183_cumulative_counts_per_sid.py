# Generated by Django 2.2.17 on 2020-12-31 10:15

from django.db import migrations
import django_db_views.migration_functions
import django_db_views.operations


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0182_puc_sid_count_view'),
    ]

    operations = [
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration('SELECT \n            1 as id,\n            product_uber_puc.puc_id AS puc_id,\n            dashboard_dsstoxlookup.id as dsstoxlookup_id ,\n            count(product_uber_puc.product_id) AS product_count\n        FROM\n            product_uber_puc\n            INNER JOIN\n            dashboard_productdocument ON (product_uber_puc.product_id = dashboard_productdocument.product_id)\n                INNER JOIN\n            dashboard_datadocument ON (dashboard_productdocument.document_id = dashboard_datadocument.id)\n                INNER JOIN\n            dashboard_rawchem ON (dashboard_datadocument.id = dashboard_rawchem.extracted_text_id)\n                INNER JOIN\n            dashboard_dsstoxlookup ON (dashboard_rawchem.dsstox_id = dashboard_dsstoxlookup.id)\n            GROUP BY product_uber_puc.puc_id, dashboard_dsstoxlookup.id\n            ', 'products_per_puc_and_sid'),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration('SELECT \n            product_uber_puc.puc_id AS puc_id,\n            dashboard_dsstoxlookup.sid as dsstoxlookup_id ,\n            count(product_uber_puc.product_id) AS product_count\n        FROM\n            product_uber_puc\n            INNER JOIN\n            dashboard_productdocument ON (product_uber_puc.product_id = dashboard_productdocument.product_id)\n                INNER JOIN\n            dashboard_datadocument ON (dashboard_productdocument.document_id = dashboard_datadocument.id)\n                INNER JOIN\n            dashboard_rawchem ON (dashboard_datadocument.id = dashboard_rawchem.extracted_text_id)\n                INNER JOIN\n            dashboard_dsstoxlookup ON (dashboard_rawchem.dsstox_id = dashboard_dsstoxlookup.id)\n            GROUP BY product_uber_puc.puc_id, sid', 'products_per_puc_and_sid'),
            atomic=False,
        ),
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration('SELECT \n            1 as id, \n            counts.dsstoxlookup_id ,\n            dashboard_puc.id as puc_id,\n            product_count,\n            cumulative_product_count,\n            puc_level\n            from\n            (SELECT products_per_puc_and_sid.dsstoxlookup_id,\n                    dashboard_puc.kind_id , \n                            dashboard_puc.gen_cat , \n                            "" as prod_fam,\n                            "" as prod_type,\n                            product_count,\n                            SUM(products_per_puc_and_sid.product_count) AS cumulative_product_count ,\n                            1 as puc_level \n                    FROM\n                    products_per_puc_and_sid\n                    LEFT JOIN dashboard_puc ON dashboard_puc.id = products_per_puc_and_sid.puc_id\n                    GROUP BY products_per_puc_and_sid.dsstoxlookup_id, dashboard_puc.kind_id , dashboard_puc.gen_cat, product_count, puc_level\n            UNION \n            SELECT products_per_puc_and_sid.dsstoxlookup_id,\n                    dashboard_puc.kind_id , \n                            dashboard_puc.gen_cat , \n                            prod_fam,\n                            "" as prod_type,\n                            product_count,\n                            SUM(products_per_puc_and_sid.product_count) AS cumulative_product_count ,\n                            2 as puc_level\n                    FROM\n                    products_per_puc_and_sid\n                    LEFT JOIN dashboard_puc ON dashboard_puc.id = products_per_puc_and_sid.puc_id\n                    GROUP BY products_per_puc_and_sid.dsstoxlookup_id, dashboard_puc.kind_id , dashboard_puc.gen_cat, dashboard_puc.prod_fam, product_count, puc_level\n            UNION \n            SELECT products_per_puc_and_sid.dsstoxlookup_id,\n                    dashboard_puc.kind_id , \n                            dashboard_puc.gen_cat , \n                            prod_fam,\n                            prod_type,\n                            product_count,\n                            product_count AS cumulative_product_count ,\n                            3 as puc_level\n                    FROM\n                    products_per_puc_and_sid\n                    LEFT JOIN dashboard_puc ON dashboard_puc.id = products_per_puc_and_sid.puc_id\n                    WHERE dashboard_puc.prod_type <> ""\n                    ) counts \n            INNER JOIN \n            dashboard_puc on dashboard_puc.kind_id = counts.kind_id \n            AND dashboard_puc.gen_cat = counts.gen_cat\n            AND dashboard_puc.prod_fam = counts.prod_fam\n            AND dashboard_puc.prod_type = counts.prod_type\n            ORDER BY\n            dsstoxlookup_id, dashboard_puc.id', 'cumulative_products_per_puc_and_sid'),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration('', 'cumulative_products_per_puc_and_sid'),
            atomic=False,
        ),
    ]
