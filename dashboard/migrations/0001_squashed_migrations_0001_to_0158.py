# Generated by Django 2.2.6 on 2020-04-23 11:32

import uuid

import django.core.validators
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models

import dashboard.models.data_document
import dashboard.utils


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# dashboard.migrations.0043_auto_20180518_1246
# dashboard.migrations.0049_auto_20180608_0957
# dashboard.migrations.0063_auto_20180906_2017
# dashboard.migrations.0072_populate_doctype_code
# dashboard.migrations.0088_rawchem_extracted_text_new
# dashboard.migrations.0090_extractedhh_doc_and_rec
# dashboard.migrations.0093_gender_choice_field
# dashboard.migrations.0096_puc_kind
# dashboard.migrations.0107_uq_datadoctypes
# dashboard.migrations.0109_strip_whitespace
# dashboard.migrations.0125_extractedlistpresencetagkind
# dashboard.migrations.0128_remove_nulls_doc_group_type
# dashboard.migrations.0133_dsstox_validations
# dashboard.migrations.0134_rm_blank_chems
# dashboard.migrations.0136_null_blank_unit_type
# dashboard.migrations.0140_update_documents
# dashboard.migrations.0145_move_datadoc_files
# dashboard.migrations.0146_functionaluse
# dashboard.migrations.0147_producttopuc_bulk_updates
# dashboard.migrations.0149_remove_extractedhabitsandpractices_fields
# dashboard.migrations.0151_unknown_product_title
# dashboard.migrations.0152_product_data_cleanup_brand_and_manufacturer


class Migration(migrations.Migration):
    replaces = [
        ("dashboard", "0001_initial"),
        ("dashboard", "0002_datasource_estimated_records"),
        ("dashboard", "0003_auto_20171120_1401"),
        ("dashboard", "0004_datagroup_updated_at"),
        ("dashboard", "0005_datagroup_downloaded_by"),
        ("dashboard", "0006_auto_20171121_1022"),
        ("dashboard", "0007_auto_20171121_1317"),
        ("dashboard", "0008_auto_20171205_0053"),
        ("dashboard", "0009_auto_20171212_1405"),
        ("dashboard", "0010_auto_20171215_1311"),
        ("dashboard", "0011_datagroup_zip_file"),
        ("dashboard", "0012_datasource_priority"),
        ("dashboard", "0013_auto_20171227_0912"),
        ("dashboard", "0013_auto_20171226_1034"),
        ("dashboard", "0014_merge_20171230_0930"),
        ("dashboard", "0015_auto_20171230_1017"),
        ("dashboard", "0016_remove_productdocument_upc"),
        ("dashboard", "0017_auto_20180115_1611"),
        ("dashboard", "0017_auto_20180110_1308"),
        ("dashboard", "0018_merge_20180117_1425"),
        ("dashboard", "0019_auto_20180118_0745"),
        ("dashboard", "0020_productcategory_last_edited_by"),
        ("dashboard", "0020_extracted_text_chem"),
        ("dashboard", "0021_merge_20180119_1347"),
        ("dashboard", "0022_auto_20180119_1944"),
        ("dashboard", "0020_datadocument_data_source"),
        ("dashboard", "0021_merge_20180120_1203"),
        ("dashboard", "0023_merge_20180120_1242"),
        ("dashboard", "0024_auto_20180120_1328"),
        ("dashboard", "0025_extractionscript_qa_begun"),
        ("dashboard", "0026_auto_20180305_1234"),
        ("dashboard", "0027_auto_20180307_1222"),
        ("dashboard", "0028_auto_20180313_1055"),
        ("dashboard", "0029_auto_20180313_1104"),
        ("dashboard", "0030_dsstoxsubstance"),
        ("dashboard", "0031_auto_20180322_1622"),
        ("dashboard", "0030_auto_20180322_0955"),
        ("dashboard", "0032_merge_20180326_1741"),
        ("dashboard", "0033_product_manufacturer"),
        ("dashboard", "0034_auto_20180410_1310"),
        ("dashboard", "0035_auto_20180411_0919"),
        ("dashboard", "0036_auto_20180419_1229"),
        ("dashboard", "0037_auto_20180420_1624"),
        ("dashboard", "0038_auto_20180424_1718"),
        ("dashboard", "0039_auto_20180430_1240"),
        ("dashboard", "0040_auto_20180503_1040"),
        ("dashboard", "0041_datadocument_source_type"),
        ("dashboard", "0042_producttopuc"),
        ("dashboard", "0043_auto_20180518_1246"),
        ("dashboard", "0044_auto_20180518_1416"),
        ("dashboard", "0045_auto_20180531_1245"),
        ("dashboard", "0046_auto_20180604_0828"),
        ("dashboard", "0047_auto_20180608_0921"),
        ("dashboard", "0048_datagroup_group_type"),
        ("dashboard", "0049_auto_20180608_0957"),
        ("dashboard", "0050_auto_20180611_1042"),
        ("dashboard", "0051_auto_20180620_1224"),
        ("dashboard", "0052_datadocument_organization"),
        ("dashboard", "0053_auto_20180703_1002"),
        ("dashboard", "0054_auto_20180703_1424"),
        ("dashboard", "0055_auto_20180712_1051"),
        ("dashboard", "0056_auto_20180716_0746"),
        ("dashboard", "0057_auto_20180717_1331"),
        ("dashboard", "0058_auto_20180720_1434"),
        ("dashboard", "0059_remove_extractedtext_record_type"),
        ("dashboard", "0060_auto_20180809_1059"),
        ("dashboard", "0061_auto_20180824_1044"),
        ("dashboard", "0062_add_datagroup_url"),
        ("dashboard", "0063_auto_20180906_2017"),
        ("dashboard", "0064_remove_datadocument_uploaded_at"),
        ("dashboard", "0065_datagroup_fs_id"),
        ("dashboard", "0066_auto_20180927_0935"),
        ("dashboard", "0067_auto_20181019_1406"),
        ("dashboard", "0068_auto_20181019_1612"),
        ("dashboard", "0069_auto_20181022_1325"),
        ("dashboard", "0070_auto_20181026_0245"),
        ("dashboard", "0071_documenttype_code"),
        ("dashboard", "0072_populate_doctype_code"),
        ("dashboard", "0073_remove_producttopuc_puc_assigned_time"),
        ("dashboard", "0074_auto_20181205_0907"),
        ("dashboard", "0075_auto_20181210_1044"),
        ("dashboard", "0076_auto_20181212_1132"),
        ("dashboard", "0077_rawchem"),
        ("dashboard", "0078_add_temp_fks"),
        ("dashboard", "0079_rename_raw_fields"),
        ("dashboard", "0080_convert_fks_to_1to1"),
        ("dashboard", "0081_refine_models"),
        ("dashboard", "0082_rename_rawchem_ptr"),
        ("dashboard", "0083_add_dsstox_lookup"),
        ("dashboard", "0084_move_sid_to_rawchem"),
        ("dashboard", "0085_remove_dsstoxsubstance"),
        ("dashboard", "0086_puc_name_change"),
        ("dashboard", "0087_auto_20190213_1733"),
        ("dashboard", "0088_rawchem_extracted_text_new"),
        ("dashboard", "0089_puc_fields"),
        ("dashboard", "0090_extractedhh_doc_and_rec"),
        ("dashboard", "0091_dd_note_field"),
        ("dashboard", "0092_puc_to_tag_assumed"),
        ("dashboard", "0093_gender_choice_field"),
        ("dashboard", "0094_unique_together"),
        ("dashboard", "0095_dd_url_and_raw_category_bigger"),
        ("dashboard", "0096_puc_kind"),
        ("dashboard", "0097_script_confidence"),
        ("dashboard", "0098_add_cpcat_qa_flag"),
        ("dashboard", "0099_qagroup_script"),
        ("dashboard", "0100_extractedchemical_names"),
        ("dashboard", "0101_verbose_dsstox_names"),
        ("dashboard", "0102_auto_20190411_1349"),
        ("dashboard", "0103_auto_20190411_1538"),
        ("dashboard", "0104_auto_20190422_0933"),
        ("dashboard", "0105_document_subtitle"),
        ("dashboard", "0106_uq_datadoctypes"),
        ("dashboard", "0107_uq_datadoctypes"),
        ("dashboard", "0108_rm_old_chem_fields"),
        ("dashboard", "0109_strip_whitespace"),
        ("dashboard", "0110_listpresence_tag_tweaks"),
        ("dashboard", "0111_PUC_tag_downloadable"),
        ("dashboard", "0112_remove_datadocument_extracted"),
        ("dashboard", "0113_extractedlistpresencetagdefinition"),
        ("dashboard", "0114_long_rawchemname"),
        ("dashboard", "0115_sort_ingredient_rank"),
        ("dashboard", "0116_reported_func_use"),
        ("dashboard", "0117_extractedlistpresencetag_kind"),
        ("dashboard", "0118_url_on_dd_dg_ds"),
        ("dashboard", "0119_longer_definition"),
        ("dashboard", "0120_auto_20190712_1054"),
        ("dashboard", "0121_remove_blank_dsstoxlookup_record"),
        ("dashboard", "0122_remove_product_data_source"),
        ("dashboard", "0123_remove_parent_link"),
        ("dashboard", "0124_doc_url_length"),
        ("dashboard", "0125_extractedlistpresencetagkind"),
        ("dashboard", "0126_functuse_field_len"),
        ("dashboard", "0127_extractedchemical_component"),
        ("dashboard", "0128_remove_nulls_doc_group_type"),
        ("dashboard", "0129_auto_20191011_1220"),
        ("dashboard", "0130_extractedchemical_fields_replace_ingredient_model"),
        ("dashboard", "0131_auditlog"),
        ("dashboard", "0132_auditlog_triggers"),
        ("dashboard", "0133_dsstox_validations"),
        ("dashboard", "0134_rm_blank_chems"),
        ("dashboard", "0135_audit_rid_trigger"),
        ("dashboard", "0136_null_blank_unit_type"),
        ("dashboard", "0137_help_text"),
        ("dashboard", "0138_field_names"),
        ("dashboard", "0139_audit_log_indexes"),
        ("dashboard", "0140_update_documents"),
        ("dashboard", "0141_refactor_component_into_rawchem"),
        ("dashboard", "0142_audit_log_triggers"),
        ("dashboard", "0143_zip_file_field"),
        ("dashboard", "0144_create_extratedhabitsandpracticesdatatype"),
        ("dashboard", "0145_move_datadoc_files"),
        ("dashboard", "0146_functionaluse"),
        ("dashboard", "0147_producttopuc_bulk_updates"),
        ("dashboard", "0148_extractedlmdoc"),
        ("dashboard", "0149_remove_extractedhabitsandpractices_fields"),
        ("dashboard", "0150_functional_use_category"),
        ("dashboard", "0151_unknown_product_title"),
        ("dashboard", "0152_product_data_cleanup_brand_and_manufacturer"),
        ("dashboard", "0153_product_add_image_field"),
        ("dashboard", "0154_duplicateproduct"),
        ("dashboard", "0155_habits_and_practices_tags"),
        ("dashboard", "0156_remove_nulls"),
        ("dashboard", "0157_modify_hp_tag_ordering"),
        ("dashboard", "0158_add_unique_constraints"),
    ]

    initial = True

    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]

    operations = [
        migrations.CreateModel(
            name="SourceType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={"ordering": ("title",)},
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                ("url", models.CharField(blank=True, max_length=150)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dashboard.SourceType",
                    ),
                ),
                (
                    "estimated_records",
                    models.PositiveIntegerField(
                        default=47,
                        validators=[dashboard.models.data_source.validate_nonzero],
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("AT", "Awaiting Triage"),
                            ("IP", "In Progress"),
                            ("CO", "Complete"),
                            ("ST", "Stale"),
                        ],
                        default="AT",
                        max_length=2,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[("HI", "High"), ("MD", "Medium"), ("LO", "Low")],
                        default="HI",
                        max_length=2,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DataGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
                ("downloaded_at", models.DateTimeField()),
                (
                    "download_script",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.DataSource",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, default=django.utils.timezone.now, null=True
                    ),
                ),
                (
                    "downloaded_by",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "csv",
                    models.FileField(
                        null=True, upload_to=dashboard.models.data_group.update_filename
                    ),
                ),
                ("zip_file", models.CharField(default=47, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="DataDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("filename", models.CharField(max_length=100)),
                ("title", models.CharField(max_length=255)),
                ("url", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "product_category",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("matched", models.BooleanField(default=False)),
                ("extracted", models.BooleanField(default=False)),
                (
                    "data_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.DataGroup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SourceCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("source_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "source_parent_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("path", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.DataSource",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Source categories"},
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=400)),
                ("upc", models.CharField(db_index=True, max_length=40, unique=True)),
                ("url", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "brand_name",
                    models.CharField(
                        blank=True, db_index=True, max_length=200, null=True
                    ),
                ),
                ("size", models.CharField(blank=True, max_length=100, null=True)),
                ("color", models.CharField(blank=True, max_length=100, null=True)),
                ("item_id", models.IntegerField(blank=True, null=True)),
                ("parent_item_id", models.IntegerField(blank=True, null=True)),
                ("short_description", models.TextField(blank=True, null=True)),
                ("long_description", models.TextField(blank=True, null=True)),
                (
                    "thumb_image",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "medium_image",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "large_image",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.DataSource",
                    ),
                ),
                (
                    "source_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.SourceCategory",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductDocument",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.DataDocument",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Product",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="datadocument",
            name="products",
            field=models.ManyToManyField(
                through="dashboard.ProductDocument", to="dashboard.Product"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="documents",
            field=models.ManyToManyField(
                through="dashboard.ProductDocument", to="dashboard.DataDocument"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="model_number",
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="product",
            name="large_image",
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name="product",
            name="medium_image",
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name="product",
            name="thumb_image",
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name="product", name="title", field=models.CharField(max_length=255)
        ),
        migrations.AlterField(
            model_name="product",
            name="upc",
            field=models.CharField(db_index=True, max_length=60, unique=True),
        ),
        migrations.AlterField(
            model_name="product",
            name="url",
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.CreateModel(
            name="ProductCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("gen_cat", models.CharField(max_length=50)),
                ("prod_fam", models.CharField(blank=True, max_length=50, null=True)),
                ("prod_type", models.CharField(blank=True, max_length=100, null=True)),
                ("description", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "last_edited_by",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Product categories",
                "ordering": ["gen_cat", "prod_fam", "prod_type"],
            },
        ),
        migrations.AlterField(
            model_name="product",
            name="data_source",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="source",
                to="dashboard.DataSource",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="prod_cat",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="category",
                to="dashboard.ProductCategory",
            ),
        ),
        migrations.CreateModel(
            name="Script",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                (
                    "url",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                ("qa_begun", models.BooleanField(default=False)),
                (
                    "script_type",
                    models.CharField(
                        choices=[
                            ("DL", "download"),
                            ("EX", "extraction"),
                            ("PC", "product categorization"),
                        ],
                        default="EX",
                        max_length=2,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name="datadocument",
            name="uploaded_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="download_script",
            field=models.ForeignKey(
                blank=True,
                default=1,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.Script",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="brand_name",
            field=models.CharField(
                blank=True, db_index=True, default="", max_length=200, null=True
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="puc_assigned_script",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dashboard.Script",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="puc_assigned_time",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="product",
            name="puc_assigned_usr",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="download_script",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.Script",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="manufacturer",
            field=models.CharField(
                blank=True, db_index=True, default="", max_length=250, null=True
            ),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="download_script",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dashboard.Script",
            ),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="downloaded_by",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.SET_DEFAULT,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="QAGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("qa_complete", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "extraction_script",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Script",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExtractedText",
            fields=[
                (
                    "data_document",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.DataDocument",
                    ),
                ),
                ("record_type", models.CharField(blank=True, max_length=50, null=True)),
                ("prod_name", models.CharField(blank=True, max_length=500, null=True)),
                ("doc_date", models.CharField(blank=True, max_length=10, null=True)),
                ("rev_num", models.CharField(blank=True, max_length=50, null=True)),
                ("qa_checked", models.BooleanField(default=False)),
                (
                    "extraction_script",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Script",
                    ),
                ),
                (
                    "qa_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="dashboard.QAGroup",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="UnitType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={"ordering": ("title",)},
        ),
        migrations.CreateModel(
            name="WeightFractionType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={"ordering": ("id",)},
        ),
        migrations.AlterModelOptions(
            name="datadocument", options={"ordering": ["-id"]}
        ),
        migrations.AlterModelOptions(
            name="product", options={"ordering": ["-created_at"]}
        ),
        migrations.AddField(
            model_name="datadocument",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name="datadocument",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name="datagroup",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.CreateModel(
            name="ExtractedChemical",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("raw_cas", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "raw_chem_name",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "raw_min_comp",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "raw_max_comp",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "unit_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dashboard.UnitType",
                    ),
                ),
                (
                    "report_funcuse",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "extracted_text",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ExtractedText",
                    ),
                ),
                (
                    "ingredient_rank",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            dashboard.models.extracted_composition.validate_ingredient_rank
                        ],
                    ),
                ),
                (
                    "raw_central_comp",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "weight_fraction_type",
                    models.ForeignKey(
                        default="1",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="dashboard.WeightFractionType",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.CreateModel(
            name="DSSToxSubstance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("true_cas", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "true_chemname",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("rid", models.CharField(blank=True, max_length=50, null=True)),
                ("sid", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "extracted_chemical",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ExtractedChemical",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="product",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AlterField(
            model_name="product",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.CreateModel(
            name="DSSToxSubstanceToIngredient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "dsstox_substance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.DSSToxSubstance",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "lower_wf_analysis",
                    models.DecimalField(
                        blank=True, decimal_places=15, max_digits=16, null=True
                    ),
                ),
                (
                    "central_wf_analysis",
                    models.DecimalField(
                        blank=True, decimal_places=15, max_digits=16, null=True
                    ),
                ),
                (
                    "upper_wf_analysis",
                    models.DecimalField(
                        blank=True, decimal_places=15, max_digits=16, null=True
                    ),
                ),
                (
                    "dsstox_substances",
                    models.ManyToManyField(
                        through="dashboard.DSSToxSubstanceToIngredient",
                        to="dashboard.DSSToxSubstance",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="ProductToIngredient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Ingredient",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Product",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="ingredient",
            name="products",
            field=models.ManyToManyField(
                through="dashboard.ProductToIngredient", to="dashboard.Product"
            ),
        ),
        migrations.AddField(
            model_name="ingredient",
            name="weight_fraction_type",
            field=models.ForeignKey(
                default="1",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.WeightFractionType",
            ),
        ),
        migrations.AddField(
            model_name="dsstoxsubstancetoingredient",
            name="ingredient",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="dashboard.Ingredient"
            ),
        ),
        migrations.AddField(
            model_name="dsstoxsubstance",
            name="ingredients",
            field=models.ManyToManyField(
                through="dashboard.DSSToxSubstanceToIngredient",
                to="dashboard.DSSToxSubstance",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="ingredients",
            field=models.ManyToManyField(
                through="dashboard.ProductToIngredient", to="dashboard.Ingredient"
            ),
        ),
        migrations.AddField(
            model_name="datadocument",
            name="source_type",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.SourceType",
            ),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="ProductToPUC",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("puc_assigned_time", models.DateTimeField(blank=True, null=True)),
                (
                    "classification_method",
                    models.CharField(
                        choices=[("MA", "Manual"), ("AU", "Automatic")],
                        default="MA",
                        max_length=2,
                    ),
                ),
                (
                    "classification_confidence",
                    models.DecimalField(
                        blank=True, decimal_places=3, default=1, max_digits=6, null=True
                    ),
                ),
                (
                    "PUC",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ProductCategory",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Product",
                    ),
                ),
                (
                    "puc_assigned_script",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="dashboard.Script",
                    ),
                ),
                (
                    "puc_assigned_usr",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.RenameModel(old_name="ProductCategory", new_name="PUC"),
        migrations.RemoveField(model_name="product", name="prod_cat"),
        migrations.RemoveField(model_name="product", name="puc_assigned_script"),
        migrations.RemoveField(model_name="product", name="puc_assigned_time"),
        migrations.RemoveField(model_name="product", name="puc_assigned_usr"),
        migrations.AddField(
            model_name="puc",
            name="products",
            field=models.ManyToManyField(
                through="dashboard.ProductToPUC", to="dashboard.Product"
            ),
        ),
        migrations.CreateModel(
            name="ProductAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=75)),
                ("type", models.CharField(max_length=75)),
            ],
            options={"ordering": ("title",)},
        ),
        migrations.CreateModel(
            name="ProductToAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Product",
                    ),
                ),
                (
                    "product_attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ProductAttribute",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="productattribute",
            name="products",
            field=models.ManyToManyField(
                through="dashboard.ProductToAttribute", to="dashboard.Product"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="attributes",
            field=models.ManyToManyField(
                through="dashboard.ProductToAttribute", to="dashboard.ProductAttribute"
            ),
        ),
        migrations.CreateModel(
            name="PUCAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
            ],
        ),
        migrations.AddField(
            model_name="puc",
            name="attribute",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.PUCAttribute",
            ),
        ),
        migrations.CreateModel(
            name="DocumentType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={"ordering": ("title",)},
        ),
        migrations.CreateModel(
            name="GroupType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={"ordering": ("title",)},
        ),
        migrations.RemoveField(model_name="datadocument", name="source_type"),
        migrations.RemoveField(model_name="datasource", name="type"),
        migrations.DeleteModel(name="SourceType"),
        migrations.AddField(
            model_name="documenttype",
            name="group_type",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="group",
                to="dashboard.GroupType",
            ),
        ),
        migrations.AddField(
            model_name="datadocument",
            name="document_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.DocumentType",
            ),
        ),
        migrations.AddField(
            model_name="datagroup",
            name="group_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dashboard.GroupType",
            ),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="group_type",
            field=models.ForeignKey(
                blank=True,
                default=1,
                null=True,
                on_delete=django.db.models.deletion.SET_DEFAULT,
                to="dashboard.GroupType",
            ),
        ),
        migrations.CreateModel(
            name="ExtractedFunctionalUse",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "raw_cas",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Raw CAS"
                    ),
                ),
                (
                    "raw_chem_name",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Raw chemical name",
                    ),
                ),
                (
                    "report_funcuse",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reported functional use",
                    ),
                ),
                (
                    "extracted_text",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uses",
                        to="dashboard.ExtractedText",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="extracted_text",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chemicals",
                to="dashboard.ExtractedText",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_cas",
            field=models.CharField(
                blank=True, max_length=50, null=True, verbose_name="Raw CAS"
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_chem_name",
            field=models.CharField(
                blank=True, max_length=500, null=True, verbose_name="Raw chemical name"
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_max_comp",
            field=models.CharField(
                blank=True,
                max_length=100,
                null=True,
                verbose_name="Raw maximum composition",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_min_comp",
            field=models.CharField(
                blank=True,
                max_length=100,
                null=True,
                verbose_name="Raw minimum composition",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="report_funcuse",
            field=models.CharField(
                blank=True,
                max_length=100,
                null=True,
                verbose_name="Reported functional use",
            ),
        ),
        migrations.AddField(
            model_name="datadocument",
            name="organization",
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.CreateModel(
            name="ExtractedHabitsAndPractices",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "product_surveyed",
                    models.CharField(max_length=50, verbose_name="Product Surveyed"),
                ),
                (
                    "mass",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        max_digits=12,
                        null=True,
                        verbose_name="Mass",
                    ),
                ),
                (
                    "mass_unit",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="Units for Mass"
                    ),
                ),
                (
                    "frequency",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        max_digits=12,
                        null=True,
                        verbose_name="Frequency",
                    ),
                ),
                (
                    "frequency_unit",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="Units for Frequency"
                    ),
                ),
                (
                    "duration",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        max_digits=12,
                        null=True,
                        verbose_name="Duration",
                    ),
                ),
                (
                    "duration_unit",
                    models.CharField(
                        blank=True, max_length=40, verbose_name="Units for Duration"
                    ),
                ),
                (
                    "prevalence",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Prevalence"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="ExtractedHabitsAndPracticesToPUC",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "PUC",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dashboard.PUC"
                    ),
                ),
                (
                    "extracted_habits_and_practices",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ExtractedHabitsAndPractices",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="extractedhabitsandpractices",
            name="PUCs",
            field=models.ManyToManyField(
                through="dashboard.ExtractedHabitsAndPracticesToPUC", to="dashboard.PUC"
            ),
        ),
        migrations.AddField(
            model_name="extractedhabitsandpractices",
            name="extracted_text",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="practices",
                to="dashboard.ExtractedText",
            ),
        ),
        migrations.AddField(
            model_name="puc",
            name="extracted_habits_and_practices",
            field=models.ManyToManyField(
                through="dashboard.ExtractedHabitsAndPracticesToPUC",
                to="dashboard.ExtractedHabitsAndPractices",
            ),
        ),
        migrations.AddField(
            model_name="extractedtext",
            name="qa_approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="QA approved by",
            ),
        ),
        migrations.AddField(
            model_name="extractedtext",
            name="qa_approved_date",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="QA approval date"
            ),
        ),
        migrations.AddField(
            model_name="extractedtext",
            name="qa_edited",
            field=models.BooleanField(default=False, verbose_name="QA edited"),
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="qa_checked",
            field=models.BooleanField(default=False, verbose_name="QA approved"),
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="qa_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dashboard.QAGroup",
                verbose_name="QA group",
            ),
        ),
        migrations.CreateModel(
            name="QANotes",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("qa_notes", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "extracted_text",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ExtractedText",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Taxonomy",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "category_code",
                    models.CharField(blank=True, max_length=40, null=True),
                ),
                (
                    "last_edited_by",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Taxonomy",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Taxonomies"},
        ),
        migrations.CreateModel(
            name="TaxonomySource",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "last_edited_by",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.SET_DEFAULT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"verbose_name_plural": "Taxonomy Sources"},
        ),
        migrations.CreateModel(
            name="TaxonomyToPUC",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "PUC",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dashboard.PUC"
                    ),
                ),
                (
                    "taxonomy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.Taxonomy",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Taxonomies to PUC's"},
        ),
        migrations.AddField(
            model_name="taxonomy",
            name="product_category",
            field=models.ManyToManyField(
                through="dashboard.TaxonomyToPUC", to="dashboard.PUC"
            ),
        ),
        migrations.AddField(
            model_name="taxonomy",
            name="source",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.TaxonomySource",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_cas",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="Raw CAS"
            ),
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="extraction_script",
            field=models.ForeignKey(
                limit_choices_to={"script_type": "EX"},
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.Script",
            ),
        ),
        migrations.AlterField(
            model_name="qagroup",
            name="extraction_script",
            field=models.ForeignKey(
                limit_choices_to={"script_type": "EX"},
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.Script",
            ),
        ),
        migrations.AlterField(
            model_name="taxonomy",
            name="last_edited_by",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.SET_DEFAULT,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="doc_date",
            field=models.CharField(blank=True, max_length=25, null=True),
        ),
        migrations.RemoveField(model_name="extractedtext", name="record_type"),
        migrations.RemoveField(model_name="producttoingredient", name="ingredient"),
        migrations.RemoveField(model_name="producttoingredient", name="product"),
        migrations.RemoveField(model_name="dsstoxsubstance", name="ingredients"),
        migrations.RemoveField(model_name="ingredient", name="dsstox_substances"),
        migrations.RemoveField(model_name="ingredient", name="products"),
        migrations.RemoveField(model_name="ingredient", name="weight_fraction_type"),
        migrations.RemoveField(model_name="product", name="ingredients"),
        migrations.AddField(
            model_name="ingredient",
            name="extracted_chemical",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.ExtractedChemical",
            ),
        ),
        migrations.AddField(
            model_name="ingredient",
            name="script",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.Script",
            ),
        ),
        migrations.DeleteModel(name="DSSToxSubstanceToIngredient"),
        migrations.DeleteModel(name="ProductToIngredient"),
        migrations.RenameField(
            model_name="datadocument",
            old_name="product_category",
            new_name="raw_category",
        ),
        migrations.AddField(
            model_name="datagroup",
            name="url",
            field=models.CharField(blank=True, max_length=150),
        ),
        migrations.RemoveField(model_name="datadocument", name="uploaded_at"),
        migrations.AddField(
            model_name="datagroup",
            name="fs_id",
            field=models.UUIDField(default=uuid.uuid4, editable=False),
        ),
        migrations.CreateModel(
            name="ExtractedCPCat",
            fields=[
                (
                    "extractedtext_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.ExtractedText",
                    ),
                ),
                (
                    "cat_code",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Cat Code"
                    ),
                ),
                (
                    "description_cpcat",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Description CPCat",
                    ),
                ),
                (
                    "cpcat_code",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="CPCat Code"
                    ),
                ),
                (
                    "cpcat_sourcetype",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="CPCat SourceType",
                    ),
                ),
            ],
            options={"abstract": False},
            bases=("dashboard.extractedtext",),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="csv",
            field=models.FileField(
                null=True, upload_to=dashboard.models.data_group.csv_upload_path
            ),
        ),
        migrations.CreateModel(
            name="ExtractedListPresence",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "raw_cas",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Raw CAS"
                    ),
                ),
                (
                    "raw_chem_name",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Raw chemical name",
                    ),
                ),
                (
                    "extracted_cpcat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="presence",
                        to="dashboard.ExtractedCPCat",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="grouptype",
            name="code",
            field=models.TextField(blank=True, max_length=10, null=True),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="filename",
            field=models.CharField(max_length=255),
        ),
        migrations.CreateModel(
            name="ProductToTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="PUCTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Name"),
                ),
                (
                    "slug",
                    models.SlugField(max_length=100, unique=True, verbose_name="Slug"),
                ),
            ],
            options={
                "verbose_name": "PUC Tag",
                "verbose_name_plural": "PUC Tags",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="PUCToTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={"abstract": False},
        ),
        migrations.RemoveField(model_name="producttoattribute", name="product"),
        migrations.RemoveField(
            model_name="producttoattribute", name="product_attribute"
        ),
        migrations.AlterModelOptions(
            name="puc",
            options={
                "ordering": ["gen_cat", "prod_fam", "prod_type"],
                "verbose_name_plural": "PUCs",
            },
        ),
        migrations.RemoveField(model_name="product", name="attributes"),
        migrations.RemoveField(model_name="puc", name="attribute"),
        migrations.DeleteModel(name="ProductAttribute"),
        migrations.DeleteModel(name="ProductToAttribute"),
        migrations.DeleteModel(name="PUCAttribute"),
        migrations.AddField(
            model_name="puctotag",
            name="content_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="dashboard.PUC"
            ),
        ),
        migrations.AddField(
            model_name="puctotag",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_puctotag_items",
                to="dashboard.PUCTag",
            ),
        ),
        migrations.AddField(
            model_name="producttotag",
            name="content_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="dashboard.Product"
            ),
        ),
        migrations.AddField(
            model_name="producttotag",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dashboard_producttotag_items",
                to="dashboard.PUCTag",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="A set of PUC Tags applicable to this Product",
                through="dashboard.ProductToTag",
                to="dashboard.PUCTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AlterField(
            model_name="producttotag",
            name="content_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="dashboard.Product"
            ),
        ),
        migrations.AddField(
            model_name="puc",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="A set of PUC Tags applicable to this PUC",
                through="dashboard.PUCToTag",
                to="dashboard.PUCTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AlterField(
            model_name="puctotag",
            name="content_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="dashboard.PUC"
            ),
        ),
        migrations.AlterField(
            model_name="producttopuc",
            name="classification_method",
            field=models.CharField(
                choices=[
                    ("MA", "Manual"),
                    ("AU", "Automatic"),
                    ("RU", "Rule Based"),
                    ("MB", "Manual Batch"),
                ],
                default="MA",
                max_length=2,
            ),
        ),
        migrations.AddField(
            model_name="documenttype",
            name="code",
            field=models.CharField(blank=True, default="??", max_length=2),
        ),
        migrations.RunSQL(
            sql='INSERT INTO dashboard_documenttype (id,code,title) VALUES(29,"UN","Unidentified")'
        ),
        migrations.RemoveField(model_name="producttopuc", name="puc_assigned_time"),
        migrations.AlterField(
            model_name="script",
            name="script_type",
            field=models.CharField(
                choices=[
                    ("DL", "download"),
                    ("EX", "extraction"),
                    ("PC", "product categorization"),
                    ("DC", "data cleaning"),
                ],
                default="EX",
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name="qanotes",
            name="extracted_text",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.ExtractedText",
            ),
        ),
        migrations.AlterField(
            model_name="qanotes",
            name="qa_notes",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="RawChem",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "raw_cas",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Raw CAS"
                    ),
                ),
                (
                    "raw_chem_name",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Raw chemical name",
                    ),
                ),
                ("temp_id", models.IntegerField(blank=True, default=0, null=True)),
                (
                    "temp_obj_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("rid", models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.RenameField(
            model_name="extractedchemical", old_name="raw_cas", new_name="raw_cas_old"
        ),
        migrations.RenameField(
            model_name="extractedchemical",
            old_name="raw_chem_name",
            new_name="raw_chem_name_old",
        ),
        migrations.RenameField(
            model_name="extractedfunctionaluse",
            old_name="raw_cas",
            new_name="raw_cas_old",
        ),
        migrations.RenameField(
            model_name="extractedfunctionaluse",
            old_name="raw_chem_name",
            new_name="raw_chem_name_old",
        ),
        migrations.RenameField(
            model_name="extractedlistpresence",
            old_name="raw_cas",
            new_name="raw_cas_old",
        ),
        migrations.RenameField(
            model_name="extractedlistpresence",
            old_name="raw_chem_name",
            new_name="raw_chem_name_old",
        ),
        migrations.RemoveField(model_name="dsstoxsubstance", name="extracted_chemical"),
        migrations.RemoveField(model_name="ingredient", name="extracted_chemical"),
        migrations.RemoveField(model_name="extractedchemical", name="id"),
        migrations.RemoveField(model_name="extractedfunctionaluse", name="id"),
        migrations.RemoveField(model_name="extractedlistpresence", name="id"),
        migrations.AddField(
            model_name="dsstoxsubstance",
            name="rawchem_ptr",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="curated_chemical",
                to="dashboard.RawChem",
            ),
        ),
        migrations.AddField(
            model_name="extractedchemical",
            name="rawchem_ptr",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                primary_key=True,
                related_name="extracted_chemical",
                serialize=False,
                to="dashboard.RawChem",
            ),
        ),
        migrations.AddField(
            model_name="extractedfunctionaluse",
            name="rawchem_ptr",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                primary_key=True,
                related_name="extracted_functionaluse",
                serialize=False,
                to="dashboard.RawChem",
            ),
        ),
        migrations.AddField(
            model_name="extractedlistpresence",
            name="rawchem_ptr",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                primary_key=True,
                related_name="extracted_listpresence",
                serialize=False,
                to="dashboard.RawChem",
            ),
        ),
        migrations.AddField(
            model_name="ingredient",
            name="rawchem_ptr",
            field=models.OneToOneField(
                default=1,
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                related_name="ingredient",
                to="dashboard.RawChem",
            ),
        ),
        migrations.CreateModel(
            name="DSSToxLookup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("sid", models.CharField(max_length=50, unique=True)),
                ("true_cas", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "true_chemname",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="rawchem",
            name="dsstox",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="curated_chemical",
                to="dashboard.DSSToxLookup",
            ),
        ),
        migrations.RunSQL(
            sql="\n        INSERT INTO dashboard_dsstoxlookup (sid, true_cas, true_chemname, created_at)\n        SELECT\n        DISTINCT sid, true_cas, true_chemname , NOW() as created_at\n        FROM dashboard_dsstoxsubstance\n        WHERE NOT sid in(SELECT distinct_lookup.sid from (SELECT DISTINCT sid, true_cas, true_chemname \n        FROM dashboard_dsstoxsubstance) distinct_lookup\n        GROUP BY SID HAVING COUNT(*) > 1)\n        ",
            reverse_sql="DELETE FROM dashboard_dsstoxlookup",
        ),
        migrations.AlterField(
            model_name="dsstoxsubstance",
            name="rawchem_ptr",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="old_curated_chemical",
                to="dashboard.RawChem",
            ),
        ),
        migrations.RunSQL(
            sql="\n            UPDATE dashboard_rawchem rc \n            inner join dashboard_dsstoxsubstance sub on \n            rc.id = sub.rawchem_ptr_id\n            inner join dashboard_dsstoxlookup dss\n            on dss.sid = sub.sid \n            SET dsstox_id = dss.id\n            ",
            reverse_sql="UPDATE dashboard_rawchem SET dsstox_id = NULL",
        ),
        migrations.DeleteModel(name="DSSToxSubstance"),
        migrations.AlterModelOptions(
            name="puctag",
            options={
                "ordering": ("name",),
                "verbose_name": "PUC Attribute",
                "verbose_name_plural": "PUC Attributes",
            },
        ),
        migrations.RenameField(
            model_name="producttopuc", old_name="PUC", new_name="puc"
        ),
        migrations.AlterField(
            model_name="puc",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="A set of PUC Attributes applicable to this PUC",
                through="dashboard.PUCToTag",
                to="dashboard.PUCTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="cpcat_code",
            field=models.CharField(
                blank=True, max_length=50, null=True, verbose_name="CPCat Code"
            ),
        ),
        migrations.AddField(
            model_name="rawchem",
            name="extracted_text_new",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="extracted_chemical",
                to="dashboard.ExtractedText",
            ),
        ),
        migrations.RemoveField(model_name="extractedchemical", name="extracted_text"),
        migrations.RemoveField(
            model_name="extractedfunctionaluse", name="extracted_text"
        ),
        migrations.RemoveField(
            model_name="extractedlistpresence", name="extracted_cpcat"
        ),
        migrations.RenameField(
            model_name="rawchem",
            old_name="extracted_text_new",
            new_name="extracted_text",
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="extracted_text",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rawchem",
                to="dashboard.ExtractedText",
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="prod_fam",
            field=models.CharField(blank=True, default="", max_length=50),
        ),
        migrations.AlterField(
            model_name="puc",
            name="prod_type",
            field=models.CharField(blank=True, default="", max_length=100),
        ),
        migrations.CreateModel(
            name="ExtractedHHDoc",
            fields=[
                (
                    "extractedtext_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.ExtractedText",
                    ),
                ),
                (
                    "hhe_report_number",
                    models.CharField(max_length=30, verbose_name="HHE Report Number"),
                ),
                (
                    "study_location",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Study Location",
                    ),
                ),
                (
                    "naics_code",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="NAICS Code"
                    ),
                ),
                (
                    "sampling_date",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Date of Sampling",
                    ),
                ),
                (
                    "population_gender",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Gender of Population",
                    ),
                ),
                (
                    "population_age",
                    models.CharField(
                        blank=True,
                        max_length=75,
                        null=True,
                        verbose_name="Age of Population",
                    ),
                ),
                (
                    "population_other",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Other Description of Population",
                    ),
                ),
                (
                    "occupation",
                    models.CharField(
                        blank=True, max_length=75, null=True, verbose_name="Occupation"
                    ),
                ),
                (
                    "facility",
                    models.CharField(
                        blank=True, max_length=75, null=True, verbose_name="Facility"
                    ),
                ),
            ],
            options={"abstract": False},
            bases=("dashboard.extractedtext",),
        ),
        migrations.CreateModel(
            name="ExtractedHHRec",
            fields=[
                (
                    "rawchem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.RawChem",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "media",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="Media"
                    ),
                ),
                (
                    "sampling_method",
                    models.TextField(
                        blank=True, null=True, verbose_name="Sampling Method"
                    ),
                ),
                (
                    "analytical_method",
                    models.TextField(
                        blank=True, null=True, verbose_name="Analytical Method"
                    ),
                ),
                (
                    "num_measure",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Numeric Measure",
                    ),
                ),
                (
                    "num_nondetect",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Numeric Nondetect",
                    ),
                ),
            ],
            options={"abstract": False},
            bases=("dashboard.rawchem", models.Model),
        ),
        migrations.AddField(
            model_name="datadocument",
            name="note",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="puctotag",
            name="assumed",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="rawchem_ptr",
            field=models.OneToOneField(
                auto_created=True,
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                primary_key=True,
                serialize=False,
                to="dashboard.RawChem",
            ),
        ),
        migrations.AlterField(
            model_name="extractedfunctionaluse",
            name="rawchem_ptr",
            field=models.OneToOneField(
                auto_created=True,
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                primary_key=True,
                serialize=False,
                to="dashboard.RawChem",
            ),
        ),
        migrations.AlterField(
            model_name="extractedlistpresence",
            name="rawchem_ptr",
            field=models.OneToOneField(
                auto_created=True,
                on_delete=django.db.models.deletion.CASCADE,
                parent_link=True,
                primary_key=True,
                serialize=False,
                to="dashboard.RawChem",
            ),
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="population_gender",
            field=models.CharField(
                blank=True,
                choices=[("BO", "Both"), ("FM", "Female"), ("MA", "Male")],
                max_length=2,
                null=True,
                verbose_name="Gender of Population",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="producttopuc",
            unique_together={("product", "puc", "classification_method")},
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="raw_category",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="url",
            field=models.CharField(blank=True, max_length=275, null=True),
        ),
        migrations.AddField(
            model_name="puc",
            name="kind",
            field=models.CharField(
                blank=True,
                choices=[
                    ("UN", "unknown"),
                    ("FO", "formulations"),
                    ("AR", "articles"),
                    ("OC", "occupational"),
                ],
                default="UN",
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A set of PUC Attributes applicable to this PUC",
                through="dashboard.PUCToTag",
                to="dashboard.PUCTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="script",
            name="confidence",
            field=models.PositiveSmallIntegerField(
                blank=True,
                default=1,
                validators=[
                    django.core.validators.MaxValueValidator(100),
                    django.core.validators.MinValueValidator(1),
                ],
                verbose_name="Confidence",
            ),
        ),
        migrations.AddField(
            model_name="extractedlistpresence",
            name="qa_flag",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="qagroup",
            name="extraction_script",
            field=models.ForeignKey(
                limit_choices_to={"script_type": "EX"},
                on_delete=django.db.models.deletion.CASCADE,
                related_name="qa_group",
                to="dashboard.Script",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="ingredient_rank",
            field=models.PositiveIntegerField(
                blank=True,
                null=True,
                validators=[
                    dashboard.models.extracted_composition.validate_ingredient_rank
                ],
                verbose_name="Ingredient rank",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_central_comp",
            field=models.CharField(
                blank=True,
                max_length=100,
                null=True,
                verbose_name="Raw central composition",
            ),
        ),
        migrations.AlterField(
            model_name="dsstoxlookup",
            name="sid",
            field=models.CharField(max_length=50, unique=True, verbose_name="DTXSID"),
        ),
        migrations.AlterField(
            model_name="dsstoxlookup",
            name="true_cas",
            field=models.CharField(
                blank=True, max_length=50, null=True, verbose_name="True CAS"
            ),
        ),
        migrations.AlterField(
            model_name="dsstoxlookup",
            name="true_chemname",
            field=models.CharField(
                blank=True, max_length=500, null=True, verbose_name="True chemical name"
            ),
        ),
        migrations.AlterField(
            model_name="script",
            name="url",
            field=models.CharField(
                blank=True,
                max_length=225,
                null=True,
                validators=[django.core.validators.URLValidator()],
            ),
        ),
        migrations.AlterField(
            model_name="taxonomy", name="title", field=models.CharField(max_length=250)
        ),
        migrations.CreateModel(
            name="ExtractedListPresenceTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Name"),
                ),
                (
                    "slug",
                    models.SlugField(max_length=100, unique=True, verbose_name="Slug"),
                ),
            ],
            options={
                "verbose_name": "ExtractedListPresence Keyword",
                "verbose_name_plural": "ExtractedListPresence Keywords",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="ExtractedListPresenceToTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ExtractedListPresence",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_extractedlistpresencetotag_items",
                        to="dashboard.ExtractedListPresenceTag",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="extractedlistpresence",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A set of keywords applicable to this Extracted List Presence",
                through="dashboard.ExtractedListPresenceToTag",
                to="dashboard.ExtractedListPresenceTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="datadocument",
            name="subtitle",
            field=models.CharField(blank=True, default=None, max_length=250, null=True),
        ),
        migrations.CreateModel(
            name="DocumentTypeGroupTypeCompatibilty",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "document_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.DocumentType",
                    ),
                ),
                (
                    "group_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.GroupType",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name": "Document type/Group type compatibilty",
                "verbose_name_plural": "Document type/Group type compatibilties",
                "unique_together": {("document_type", "group_type")},
            },
        ),
        migrations.RemoveField(model_name="documenttype", name="group_type"),
        migrations.AlterField(
            model_name="documenttype",
            name="code",
            field=models.CharField(blank=True, default="??", max_length=2, unique=True),
        ),
        migrations.AlterField(
            model_name="documenttype",
            name="title",
            field=models.CharField(max_length=50, unique=True),
        ),
        migrations.AddField(
            model_name="documenttype",
            name="group_types",
            field=models.ManyToManyField(
                related_name="groups",
                through="dashboard.DocumentTypeGroupTypeCompatibilty",
                to="dashboard.GroupType",
            ),
        ),
        migrations.RemoveField(model_name="extractedchemical", name="raw_cas_old"),
        migrations.RemoveField(
            model_name="extractedchemical", name="raw_chem_name_old"
        ),
        migrations.RemoveField(model_name="extractedfunctionaluse", name="raw_cas_old"),
        migrations.RemoveField(
            model_name="extractedfunctionaluse", name="raw_chem_name_old"
        ),
        migrations.RemoveField(model_name="extractedlistpresence", name="raw_cas_old"),
        migrations.RemoveField(
            model_name="extractedlistpresence", name="raw_chem_name_old"
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="cat_code",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="Cat code"
            ),
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="cpcat_code",
            field=models.CharField(
                blank=True, max_length=50, null=True, verbose_name="ACToR snaid"
            ),
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="cpcat_sourcetype",
            field=models.CharField(
                blank=True, max_length=50, null=True, verbose_name="CPCat source"
            ),
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="description_cpcat",
            field=models.CharField(
                blank=True, max_length=200, null=True, verbose_name="CPCat cassette"
            ),
        ),
        migrations.AlterModelOptions(
            name="extractedlistpresencetag",
            options={
                "ordering": ("name",),
                "verbose_name": "Extracted list presence keyword",
                "verbose_name_plural": "Extracted list presence keywords",
            },
        ),
        migrations.AlterModelOptions(
            name="extractedlistpresencetotag",
            options={
                "ordering": ("content_object",),
                "verbose_name": "Extracted list presence to keyword",
                "verbose_name_plural": "Extracted list presence to keywords",
            },
        ),
        migrations.AlterField(
            model_name="extractedlistpresence",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="dashboard.ExtractedListPresenceToTag",
                to="dashboard.ExtractedListPresenceTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="puctag",
            name="definition",
            field=models.TextField(blank=True, max_length=255, null=True),
        ),
        migrations.RemoveField(model_name="datadocument", name="extracted"),
        migrations.AlterField(
            model_name="rawchem",
            name="raw_chem_name",
            field=models.CharField(
                blank=True, max_length=1300, null=True, verbose_name="Raw chemical name"
            ),
        ),
        migrations.AlterModelOptions(
            name="extractedchemical",
            options={
                "ordering": (
                    django.db.models.expressions.OrderBy(
                        django.db.models.expressions.F("ingredient_rank"),
                        nulls_last=True,
                    ),
                )
            },
        ),
        migrations.AddField(
            model_name="extractedlistpresence",
            name="report_funcuse",
            field=models.CharField(
                blank=True,
                max_length=100,
                null=True,
                verbose_name="Reported functional use",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_central_comp",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="Central"
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_max_comp",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="Maximum"
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_min_comp",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="Minimum"
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="report_funcuse",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="Functional use"
            ),
        ),
        migrations.AddField(
            model_name="extractedlistpresencetag",
            name="kind",
            field=models.CharField(
                choices=[
                    ("GU", "General use"),
                    ("PH", "Pharmaceutical"),
                    ("LP", "List presence"),
                ],
                default="GU",
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="url",
            field=models.CharField(
                blank=True,
                max_length=275,
                null=True,
                validators=[django.core.validators.URLValidator()],
            ),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="url",
            field=models.CharField(
                blank=True,
                max_length=150,
                validators=[django.core.validators.URLValidator()],
            ),
        ),
        migrations.AlterField(
            model_name="datasource",
            name="url",
            field=models.CharField(
                blank=True,
                max_length=150,
                validators=[django.core.validators.URLValidator()],
            ),
        ),
        migrations.AddField(
            model_name="extractedlistpresencetag",
            name="definition",
            field=models.CharField(
                blank=True, max_length=750, null=True, verbose_name="Definition"
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="raw_category",
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="report_funcuse",
            field=models.CharField(
                blank=True, max_length=255, null=True, verbose_name="Functional use"
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="unit_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.UnitType",
            ),
        ),
        migrations.AlterField(
            model_name="grouptype",
            name="code",
            field=models.CharField(blank=True, max_length=2, null=True, unique=True),
        ),
        migrations.RemoveField(model_name="product", name="data_source"),
        migrations.AlterField(
            model_name="ingredient",
            name="rawchem_ptr",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ingredient",
                to="dashboard.RawChem",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="url",
            field=models.CharField(
                blank=True,
                max_length=375,
                null=True,
                validators=[django.core.validators.URLValidator()],
            ),
        ),
        migrations.CreateModel(
            name="ExtractedListPresenceTagKind",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "abstract": False,
                "verbose_name": "Extracted list presence keyword kind",
                "verbose_name_plural": "Extracted list presence keyword kinds",
            },
        ),
        migrations.RenameField(
            model_name="extractedlistpresencetag", old_name="kind", new_name="kind_bak"
        ),
        migrations.AddField(
            model_name="extractedlistpresencetag",
            name="kind",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.ExtractedListPresenceTagKind",
            ),
        ),
        migrations.RemoveField(model_name="extractedlistpresencetag", name="kind_bak"),
        migrations.AlterField(
            model_name="extractedchemical",
            name="report_funcuse",
            field=models.CharField(
                blank=True,
                max_length=255,
                null=True,
                verbose_name="Reported functional use",
            ),
        ),
        migrations.AlterField(
            model_name="extractedfunctionaluse",
            name="report_funcuse",
            field=models.CharField(
                blank=True,
                max_length=255,
                null=True,
                verbose_name="Reported functional use",
            ),
        ),
        migrations.AlterField(
            model_name="extractedlistpresence",
            name="report_funcuse",
            field=models.CharField(
                blank=True,
                max_length=255,
                null=True,
                verbose_name="Reported functional use",
            ),
        ),
        migrations.AddField(
            model_name="extractedchemical",
            name="component",
            field=models.CharField(
                blank=True, max_length=200, null=True, verbose_name="Component"
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="unit_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.UnitType",
                verbose_name="Unit type",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="weight_fraction_type",
            field=models.ForeignKey(
                default="1",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.WeightFractionType",
                verbose_name="Weight fraction type",
            ),
        ),
        migrations.AlterField(
            model_name="unittype",
            name="description",
            field=models.TextField(blank=True, null=True, verbose_name="Unit Type"),
        ),
        migrations.AlterField(
            model_name="unittype",
            name="title",
            field=models.CharField(max_length=50, verbose_name="Unit Type"),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="document_type",
            field=models.ForeignKey(
                default=dashboard.models.data_document.get_default_document_type,
                on_delete=models.SET(
                    dashboard.models.data_document.get_default_document_type
                ),
                to="dashboard.DocumentType",
            ),
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="group_type",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.SET_DEFAULT,
                to="dashboard.GroupType",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="brand_name",
            field=models.CharField(
                blank=True,
                db_index=True,
                default="",
                help_text="brand name",
                max_length=200,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="color",
            field=models.CharField(
                blank=True, help_text="color", max_length=100, null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="documents",
            field=models.ManyToManyField(
                help_text="Data Documents related to this Product",
                through="dashboard.ProductDocument",
                to="dashboard.DataDocument",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="item_id",
            field=models.IntegerField(blank=True, help_text="item ID", null=True),
        ),
        migrations.AlterField(
            model_name="product",
            name="large_image",
            field=models.CharField(
                blank=True, help_text="large image", max_length=500, null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="long_description",
            field=models.TextField(blank=True, help_text="long description", null=True),
        ),
        migrations.AlterField(
            model_name="product",
            name="manufacturer",
            field=models.CharField(
                blank=True,
                db_index=True,
                default="",
                help_text="title",
                max_length=250,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="medium_image",
            field=models.CharField(
                blank=True, help_text="medium image", max_length=500, null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="model_number",
            field=models.CharField(
                blank=True, help_text="model number", max_length=200, null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="parent_item_id",
            field=models.IntegerField(
                blank=True, help_text="parent item ID", null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="short_description",
            field=models.TextField(
                blank=True, help_text="short description", null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="size",
            field=models.CharField(
                blank=True, help_text="size", max_length=100, null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="source_category",
            field=models.ForeignKey(
                blank=True,
                help_text="The category assigned in the product's data source",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.SourceCategory",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="thumb_image",
            field=models.CharField(
                blank=True, help_text="thumbnail image", max_length=500, null=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="upc",
            field=models.CharField(
                db_index=True, help_text="UPC", max_length=60, unique=True
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="url",
            field=models.CharField(
                blank=True, help_text="URL", max_length=500, null=True
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="description",
            field=models.TextField(help_text="PUC description"),
        ),
        migrations.AlterField(
            model_name="puc",
            name="extracted_habits_and_practices",
            field=models.ManyToManyField(
                help_text="extracted Habits and Practices records assigned to this PUC",
                through="dashboard.ExtractedHabitsAndPracticesToPUC",
                to="dashboard.ExtractedHabitsAndPractices",
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="gen_cat",
            field=models.CharField(help_text="general category", max_length=50),
        ),
        migrations.AlterField(
            model_name="puc",
            name="kind",
            field=models.CharField(
                blank=True,
                choices=[
                    ("UN", "unknown"),
                    ("FO", "formulations"),
                    ("AR", "articles"),
                    ("OC", "occupational"),
                ],
                default="UN",
                help_text="kind",
                max_length=2,
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="last_edited_by",
            field=models.ForeignKey(
                default=1,
                help_text="last edited by",
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="prod_fam",
            field=models.CharField(
                blank=True, default="", help_text="product family", max_length=50
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="prod_type",
            field=models.CharField(
                blank=True, default="", help_text="product type", max_length=100
            ),
        ),
        migrations.AlterField(
            model_name="puc",
            name="products",
            field=models.ManyToManyField(
                help_text="products assigned to this PUC",
                through="dashboard.ProductToPUC",
                to="dashboard.Product",
            ),
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="raw_cas",
            field=models.CharField(
                blank=True,
                help_text="Raw CAS",
                max_length=100,
                null=True,
                verbose_name="Raw CAS",
            ),
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="raw_chem_name",
            field=models.CharField(
                blank=True,
                help_text="Raw chemical name",
                max_length=1300,
                null=True,
                verbose_name="Raw chemical name",
            ),
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="rid",
            field=models.CharField(
                blank=True, help_text="RID", max_length=50, null=True
            ),
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="data_source",
            field=models.ForeignKey(
                help_text="data source",
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.DataSource",
            ),
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="path",
            field=models.CharField(
                blank=True, help_text="path", max_length=255, null=True
            ),
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="source_id",
            field=models.CharField(
                blank=True, help_text="source ID", max_length=255, null=True
            ),
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="source_parent_id",
            field=models.CharField(
                blank=True, help_text="source parent ID", max_length=255, null=True
            ),
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="title",
            field=models.CharField(help_text="title", max_length=200),
        ),
        migrations.AddField(
            model_name="extractedchemical",
            name="central_wf_analysis",
            field=models.DecimalField(
                blank=True,
                decimal_places=15,
                help_text="central weight fraction",
                max_digits=16,
                null=True,
                validators=[
                    dashboard.models.extracted_composition.validate_wf_analysis
                ],
                verbose_name="Central weight fraction analysis",
            ),
        ),
        migrations.AddField(
            model_name="extractedchemical",
            name="lower_wf_analysis",
            field=models.DecimalField(
                blank=True,
                decimal_places=15,
                help_text="minimum weight fraction",
                max_digits=16,
                null=True,
                validators=[
                    dashboard.models.extracted_composition.validate_wf_analysis
                ],
                verbose_name="Lower weight fraction analysis",
            ),
        ),
        migrations.AddField(
            model_name="extractedchemical",
            name="script",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.Script",
            ),
        ),
        migrations.AddField(
            model_name="extractedchemical",
            name="upper_wf_analysis",
            field=models.DecimalField(
                blank=True,
                decimal_places=15,
                help_text="maximum weight fraction",
                max_digits=16,
                null=True,
                validators=[
                    dashboard.models.extracted_composition.validate_wf_analysis
                ],
                verbose_name="Upper weight fraction analysis",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="component",
            field=models.CharField(
                blank=True,
                help_text="product component",
                max_length=200,
                null=True,
                verbose_name="Component",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="ingredient_rank",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="ingredient rank",
                null=True,
                validators=[
                    dashboard.models.extracted_composition.validate_ingredient_rank
                ],
                verbose_name="Ingredient rank",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_central_comp",
            field=models.CharField(
                blank=True,
                help_text="central composition",
                max_length=100,
                null=True,
                verbose_name="Central",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_max_comp",
            field=models.CharField(
                blank=True,
                help_text="maximum composition",
                max_length=100,
                null=True,
                verbose_name="Maximum",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_min_comp",
            field=models.CharField(
                blank=True,
                help_text="minimum composition",
                max_length=100,
                null=True,
                verbose_name="Minimum",
            ),
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="report_funcuse",
            field=models.CharField(
                blank=True,
                help_text="functional use",
                max_length=255,
                null=True,
                verbose_name="Reported functional use",
            ),
        ),
        migrations.DeleteModel(name="Ingredient"),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_key", models.PositiveIntegerField(null=True)),
                ("model_name", models.CharField(max_length=128)),
                ("field_name", models.CharField(db_index=True, max_length=128)),
                ("old_value", models.TextField(null=True)),
                ("new_value", models.TextField(null=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("action", models.CharField(max_length=1)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="dsstoxlookup",
            name="sid",
            field=models.CharField(
                max_length=50,
                unique=True,
                validators=[
                    dashboard.models.dsstox_lookup.validate_prefix,
                    dashboard.models.dsstox_lookup.validate_blank_char,
                ],
                verbose_name="DTXSID",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="data_group",
            field=models.ForeignKey(
                help_text="the DataGroup object to which the document belongs. The type of the data group determines which document types the document might be among, and determines much of the available relationships and behavior associated with the document's extracted data",
                on_delete=django.db.models.deletion.CASCADE,
                to="dashboard.DataGroup",
                verbose_name="data group",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="document_type",
            field=models.ForeignKey(
                default=dashboard.models.data_document.get_default_document_type,
                help_text="each type of data group may only contain certain types of data documents. The clean() method checks to make sure that the assigned document type is among the types allowed by the group type",
                on_delete=models.SET(
                    dashboard.models.data_document.get_default_document_type
                ),
                to="dashboard.DocumentType",
                verbose_name="document type",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="filename",
            field=models.CharField(
                help_text="The name of the document's source file",
                max_length=255,
                verbose_name="file name",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="matched",
            field=models.BooleanField(
                default=False,
                help_text="When a source file for the document has been uploaded to the file system, the document is considered matched to that source file. ",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="note",
            field=models.TextField(
                blank=True,
                help_text="Long-form notes about the document",
                null=True,
                verbose_name="note",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="organization",
            field=models.CharField(
                blank=True,
                help_text="The organization that provided the source file",
                max_length=255,
                verbose_name="organization",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="products",
            field=models.ManyToManyField(
                help_text="Products are associated with the data document in a many-to-many relationship",
                through="dashboard.ProductDocument",
                to="dashboard.Product",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="raw_category",
            field=models.CharField(
                blank=True,
                help_text="the category applied by the document's originating dataset",
                max_length=1000,
                null=True,
                verbose_name="raw category",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="subtitle",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="the subtitle of the document",
                max_length=250,
                null=True,
                verbose_name="subtitle",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="title",
            field=models.CharField(
                help_text="the title of the document",
                max_length=255,
                verbose_name="title",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="url",
            field=models.CharField(
                blank=True,
                help_text="an optional URL to the document's remote source",
                max_length=375,
                null=True,
                validators=[django.core.validators.URLValidator()],
                verbose_name="URL",
            ),
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="doc_date",
            field=models.CharField(
                blank=True, max_length=25, null=True, verbose_name="Document date"
            ),
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="prod_name",
            field=models.CharField(
                blank=True,
                help_text="The name of the product according to the extracted document",
                max_length=500,
                null=True,
                verbose_name="Product name",
            ),
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="rev_num",
            field=models.CharField(
                blank=True, max_length=50, null=True, verbose_name="Revision number"
            ),
        ),
        migrations.AlterField(
            model_name="auditlog",
            name="date_created",
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["object_key", "model_name", "field_name"],
                name="dashboard_a_object__bdfb42_idx",
            ),
        ),
        migrations.AddField(
            model_name="rawchem",
            name="component",
            field=models.CharField(
                blank=True,
                help_text="product component",
                max_length=200,
                null=True,
                verbose_name="Component",
            ),
        ),
        migrations.RemoveField(model_name="extractedchemical", name="component"),
        migrations.AlterField(
            model_name="datagroup",
            name="zip_file",
            field=models.CharField(max_length=300),
        ),
        migrations.CreateModel(
            name="ExtractedHabitsAndPracticesDataType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=50)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.AddField(
            model_name="extractedhabitsandpractices",
            name="data_type",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.ExtractedHabitsAndPracticesDataType",
            ),
        ),
        migrations.AddField(
            model_name="datadocument",
            name="file",
            field=models.FileField(
                blank=True,
                default="",
                help_text="The document's source file",
                max_length=255,
                upload_to=dashboard.utils.uuid_file,
                verbose_name="file",
            ),
        ),
        migrations.RemoveField(model_name="datadocument", name="matched"),
        migrations.RemoveField(model_name="datagroup", name="csv"),
        migrations.RemoveField(model_name="datagroup", name="fs_id"),
        migrations.RemoveField(model_name="datagroup", name="zip_file"),
        migrations.CreateModel(
            name="FunctionalUse",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "report_funcuse",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Reported functional use",
                    ),
                ),
                (
                    "clean_funcuse",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Cleaned functional use",
                    ),
                ),
                (
                    "chem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="functional_uses",
                        to="dashboard.RawChem",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.RemoveField(model_name="extractedchemical", name="report_funcuse"),
        migrations.RemoveField(
            model_name="extractedfunctionaluse", name="report_funcuse"
        ),
        migrations.RemoveField(
            model_name="extractedlistpresence", name="report_funcuse"
        ),
        migrations.AlterField(
            model_name="producttopuc",
            name="classification_method",
            field=models.CharField(
                choices=[
                    ("MA", "Manual"),
                    ("AU", "Automatic"),
                    ("RU", "Rule Based"),
                    ("MB", "Manual Batch"),
                    ("BA", "Bulk Assignment"),
                ],
                default="MA",
                max_length=2,
            ),
        ),
        migrations.CreateModel(
            name="ExtractedLMDoc",
            fields=[
                (
                    "extractedtext_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.ExtractedText",
                    ),
                ),
                (
                    "study_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Targeted", "Targeted"),
                            ("Non-Targeted", "Non-Targeted"),
                            ("Other", "Other"),
                        ],
                        max_length=12,
                        verbose_name="Study Type",
                    ),
                ),
                (
                    "pmid",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]*$", "PMID must be numerical"
                            )
                        ],
                        verbose_name="PMID",
                    ),
                ),
                (
                    "media",
                    models.CharField(blank=True, max_length=100, verbose_name="Media"),
                ),
            ],
            options={"abstract": False},
            bases=("dashboard.extractedtext",),
        ),
        migrations.RemoveField(
            model_name="extractedhabitsandpractices", name="duration"
        ),
        migrations.RemoveField(
            model_name="extractedhabitsandpractices", name="duration_unit"
        ),
        migrations.RemoveField(
            model_name="extractedhabitsandpractices", name="frequency"
        ),
        migrations.RemoveField(
            model_name="extractedhabitsandpractices", name="frequency_unit"
        ),
        migrations.RemoveField(model_name="extractedhabitsandpractices", name="mass"),
        migrations.RemoveField(
            model_name="extractedhabitsandpractices", name="mass_unit"
        ),
        migrations.RemoveField(
            model_name="extractedhabitsandpractices", name="prevalence"
        ),
        migrations.AlterField(
            model_name="extractedhabitsandpractices",
            name="data_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.ExtractedHabitsAndPracticesDataType",
            ),
        ),
        migrations.CreateModel(
            name="FunctionalUseCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("title", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "functional use categories",
                "ordering": ("title",),
            },
        ),
        migrations.AddField(
            model_name="functionaluse",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dashboard.FunctionalUseCategory",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="image",
            field=models.ImageField(
                blank=True,
                help_text="The product's image file",
                null=True,
                upload_to=dashboard.utils.uuid_file,
                validators=[dashboard.models.product.validate_product_image_size],
            ),
        ),
        migrations.CreateModel(
            name="DuplicateProduct",
            fields=[
                (
                    "product_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="dashboard.Product",
                    ),
                ),
                (
                    "source_upc",
                    models.CharField(
                        db_index=True, help_text="Source UPC", max_length=60
                    ),
                ),
            ],
            options={"abstract": False},
            bases=("dashboard.product",),
        ),
        migrations.CreateModel(
            name="ExtractedHabitsAndPracticesTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="Name"),
                ),
                (
                    "slug",
                    models.SlugField(max_length=100, unique=True, verbose_name="Slug"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "definition",
                    models.CharField(
                        blank=True, max_length=750, null=True, verbose_name="Definition"
                    ),
                ),
            ],
            options={
                "verbose_name": "Extracted habits and practices keyword",
                "verbose_name_plural": "Extracted habits and practices keywords",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="ExtractedHabitsAndPracticesTagKind",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "verbose_name": "Extracted habits and practices keyword kind",
                "verbose_name_plural": "Extracted habits and practices keyword kinds",
            },
        ),
        migrations.CreateModel(
            name="ExtractedHabitsAndPracticesToTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.ExtractedHabitsAndPractices",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_extractedhabitsandpracticestotag_items",
                        to="dashboard.ExtractedHabitsAndPracticesTag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Extracted habits and practices to keyword",
                "verbose_name_plural": "Extracted habits and practices to keywords",
                "ordering": ("content_object",),
            },
        ),
        migrations.AddField(
            model_name="extractedhabitsandpracticestag",
            name="kind",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                to="dashboard.ExtractedHabitsAndPracticesTagKind",
            ),
        ),
        migrations.AddField(
            model_name="extractedhabitsandpractices",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="dashboard.ExtractedHabitsAndPracticesToTag",
                to="dashboard.ExtractedHabitsAndPracticesTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="note",
            field=models.TextField(
                blank=True,
                default="",
                help_text="Long-form notes about the document",
                verbose_name="note",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="raw_category",
            field=models.CharField(
                blank=True,
                default="",
                help_text="the category applied by the document's originating dataset",
                max_length=1000,
                verbose_name="raw category",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="subtitle",
            field=models.CharField(
                blank=True,
                default="",
                help_text="the subtitle of the document",
                max_length=250,
                verbose_name="subtitle",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="datadocument",
            name="url",
            field=models.CharField(
                blank=True,
                default="",
                help_text="an optional URL to the document's remote source",
                max_length=375,
                validators=[django.core.validators.URLValidator()],
                verbose_name="URL",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="datagroup",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="datasource",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="documenttype",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="dsstoxlookup",
            name="true_cas",
            field=models.CharField(
                blank=True, default="", max_length=50, verbose_name="True CAS"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="dsstoxlookup",
            name="true_chemname",
            field=models.CharField(
                blank=True,
                default="",
                max_length=500,
                verbose_name="True chemical name",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_central_comp",
            field=models.CharField(
                blank=True,
                default="",
                help_text="central composition",
                max_length=100,
                verbose_name="Central",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_max_comp",
            field=models.CharField(
                blank=True,
                default="",
                help_text="maximum composition",
                max_length=100,
                verbose_name="Maximum",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedchemical",
            name="raw_min_comp",
            field=models.CharField(
                blank=True,
                default="",
                help_text="minimum composition",
                max_length=100,
                verbose_name="Minimum",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="cat_code",
            field=models.CharField(
                blank=True, default="", max_length=100, verbose_name="Cat code"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="cpcat_code",
            field=models.CharField(
                blank=True, default="", max_length=50, verbose_name="ACToR snaid"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="cpcat_sourcetype",
            field=models.CharField(
                blank=True, default="", max_length=50, verbose_name="CPCat source"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedcpcat",
            name="description_cpcat",
            field=models.CharField(
                blank=True, default="", max_length=200, verbose_name="CPCat cassette"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhabitsandpracticesdatatype",
            name="description",
            field=models.CharField(blank=True, default="", max_length=255),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="facility",
            field=models.CharField(
                blank=True, default="", max_length=75, verbose_name="Facility"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="naics_code",
            field=models.CharField(
                blank=True, default="", max_length=10, verbose_name="NAICS Code"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="occupation",
            field=models.CharField(
                blank=True, default="", max_length=75, verbose_name="Occupation"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="population_age",
            field=models.CharField(
                blank=True, default="", max_length=75, verbose_name="Age of Population"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="population_gender",
            field=models.CharField(
                blank=True,
                choices=[("BO", "Both"), ("FM", "Female"), ("MA", "Male")],
                default="",
                max_length=2,
                verbose_name="Gender of Population",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="population_other",
            field=models.CharField(
                blank=True,
                default="",
                max_length=255,
                verbose_name="Other Description of Population",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="sampling_date",
            field=models.CharField(
                blank=True, default="", max_length=75, verbose_name="Date of Sampling"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhdoc",
            name="study_location",
            field=models.CharField(
                blank=True, default="", max_length=50, verbose_name="Study Location"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhrec",
            name="analytical_method",
            field=models.TextField(
                blank=True, default="", verbose_name="Analytical Method"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhrec",
            name="media",
            field=models.CharField(
                blank=True, default="", max_length=30, verbose_name="Media"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhrec",
            name="num_measure",
            field=models.CharField(
                blank=True, default="", max_length=50, verbose_name="Numeric Measure"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhrec",
            name="num_nondetect",
            field=models.CharField(
                blank=True, default="", max_length=50, verbose_name="Numeric Nondetect"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhhrec",
            name="sampling_method",
            field=models.TextField(
                blank=True, default="", verbose_name="Sampling Method"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedlistpresencetag",
            name="definition",
            field=models.CharField(
                blank=True, default="", max_length=750, verbose_name="Definition"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="doc_date",
            field=models.CharField(
                blank=True, default="", max_length=25, verbose_name="Document date"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="prod_name",
            field=models.CharField(
                blank=True,
                default="",
                help_text="The name of the product according to the extracted document",
                max_length=500,
                verbose_name="Product name",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedtext",
            name="rev_num",
            field=models.CharField(
                blank=True, default="", max_length=50, verbose_name="Revision number"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="functionalusecategory",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="grouptype",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="brand_name",
            field=models.CharField(
                blank=True,
                db_index=True,
                default="",
                help_text="brand name",
                max_length=200,
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="color",
            field=models.CharField(
                blank=True, default="", help_text="color", max_length=100
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="large_image",
            field=models.CharField(
                blank=True, default="", help_text="large image", max_length=500
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="long_description",
            field=models.TextField(
                blank=True, default="", help_text="long description"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="manufacturer",
            field=models.CharField(
                blank=True, db_index=True, default="", help_text="title", max_length=250
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="medium_image",
            field=models.CharField(
                blank=True, default="", help_text="medium image", max_length=500
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="model_number",
            field=models.CharField(
                blank=True, default="", help_text="model number", max_length=200
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="short_description",
            field=models.TextField(
                blank=True, default="", help_text="short description"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="size",
            field=models.CharField(
                blank=True, default="", help_text="size", max_length=100
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="thumb_image",
            field=models.CharField(
                blank=True, default="", help_text="thumbnail image", max_length=500
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="product",
            name="url",
            field=models.CharField(
                blank=True, default="", help_text="URL", max_length=500
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="puctag",
            name="definition",
            field=models.TextField(blank=True, default="", max_length=255),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="qanotes",
            name="qa_notes",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="component",
            field=models.CharField(
                blank=True,
                default="",
                help_text="product component",
                max_length=200,
                verbose_name="Component",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="raw_cas",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Raw CAS",
                max_length=100,
                verbose_name="Raw CAS",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="raw_chem_name",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Raw chemical name",
                max_length=1300,
                verbose_name="Raw chemical name",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="rid",
            field=models.CharField(
                blank=True, default="", help_text="RID", max_length=50
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="rawchem",
            name="temp_obj_name",
            field=models.CharField(blank=True, default="", max_length=255),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="script",
            name="url",
            field=models.CharField(
                blank=True,
                default="",
                max_length=225,
                validators=[django.core.validators.URLValidator()],
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="path",
            field=models.CharField(
                blank=True, default="", help_text="path", max_length=255
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="source_id",
            field=models.CharField(
                blank=True, default="", help_text="source ID", max_length=255
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="sourcecategory",
            name="source_parent_id",
            field=models.CharField(
                blank=True, default="", help_text="source parent ID", max_length=255
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="taxonomy",
            name="category_code",
            field=models.CharField(blank=True, default="", max_length=40),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="taxonomy",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="taxonomysource",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="unittype",
            name="description",
            field=models.TextField(blank=True, default="", verbose_name="Unit Type"),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="weightfractiontype",
            name="description",
            field=models.TextField(blank=True, default=""),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="extractedhabitsandpracticestag",
            name="definition",
            field=models.CharField(
                blank=True, default="", max_length=750, verbose_name="Definition"
            ),
            preserve_default=False,
        ),
        migrations.AlterModelOptions(
            name="extractedhabitsandpracticestag",
            options={
                "ordering": ("kind", "name"),
                "verbose_name": "Extracted habits and practices keyword",
                "verbose_name_plural": "Extracted habits and practices keywords",
            },
        ),
        migrations.AlterModelOptions(
            name="extractedhabitsandpracticestopuc",
            options={
                "verbose_name": "Extracted Habits and Practices/PUC Association",
                "verbose_name_plural": "Extracted Habits and Practices/PUC Associations",
            },
        ),
        migrations.AlterModelOptions(
            name="productdocument",
            options={
                "verbose_name": "Product/Document Association",
                "verbose_name_plural": "Product/Document Associations",
            },
        ),
        migrations.AlterModelOptions(
            name="puctotag",
            options={"verbose_name": "PUC Tag", "verbose_name_plural": "PUC Tags"},
        ),
        migrations.AlterModelOptions(
            name="taxonomytopuc",
            options={
                "verbose_name": "Taxonomy/PUC Association",
                "verbose_name_plural": "Taxonomy/PUC Associations",
            },
        ),
        migrations.AlterModelOptions(
            name="producttotag",
            options={
                "verbose_name": "Product/PUC Association",
                "verbose_name_plural": "Product/PUC Associations",
            },
        ),
        migrations.AlterUniqueTogether(
            name="extractedhabitsandpracticestopuc",
            unique_together={("extracted_habits_and_practices", "PUC")},
        ),
        migrations.AlterUniqueTogether(
            name="extractedlistpresencetotag",
            unique_together={("content_object", "tag")},
        ),
        migrations.AlterUniqueTogether(
            name="productdocument", unique_together={("product", "document")}
        ),
        migrations.AlterUniqueTogether(
            name="puctotag", unique_together={("content_object", "tag")}
        ),
        migrations.AlterUniqueTogether(
            name="taxonomytopuc", unique_together={("taxonomy", "PUC")}
        ),
        migrations.AlterUniqueTogether(
            name="producttotag", unique_together={("content_object", "tag")}
        ),
    ]
